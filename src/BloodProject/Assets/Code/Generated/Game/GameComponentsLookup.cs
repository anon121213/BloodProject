//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentLookupGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public static class GameComponentsLookup {

    public const int AddedView = 0;
    public const int Dead = 1;
    public const int Destructed = 2;
    public const int Owner = 3;
    public const int Processed = 4;
    public const int Radius = 5;
    public const int SelfDestructTimer = 6;
    public const int View = 7;
    public const int ViewPath = 8;
    public const int ViewPrefab = 9;
    public const int ViewReference = 10;
    public const int Active = 11;
    public const int CharacterController = 12;
    public const int Damage = 13;
    public const int EntityLink = 14;
    public const int Id = 15;
    public const int Rigidbody = 16;
    public const int SpriteRenderer = 17;
    public const int Transform = 18;
    public const int WorldPosition = 19;
    public const int WorldRotation = 20;
    public const int Camera = 21;
    public const int CameraHolder = 22;
    public const int Model = 23;
    public const int Player = 24;
    public const int AttackPoint = 25;
    public const int Shoot = 26;
    public const int CurrentHealth = 27;
    public const int DamageEffect = 28;
    public const int Effect = 29;
    public const int EffectValue = 30;
    public const int MaxHealth = 31;
    public const int ProducerId = 32;
    public const int PushEffect = 33;
    public const int TargetId = 34;
    public const int BaseStats = 35;
    public const int StatChange = 36;
    public const int StatModifiers = 37;
    public const int Direction = 38;
    public const int MoveByPhysic = 39;
    public const int MovementAvailable = 40;
    public const int MoveSmooth = 41;
    public const int Moving = 42;
    public const int RotationAlignedAlongDirection = 43;
    public const int Speed = 44;
    public const int Teleport = 45;
    public const int TurnedAlongDirection = 46;
    public const int EffectSetups = 47;
    public const int Projectile = 48;
    public const int SimpleBulletProjectile = 49;
    public const int CollectTargetsContinuously = 50;
    public const int CollectTargetsInterval = 51;
    public const int CollectTargetsTimer = 52;
    public const int LayerMask = 53;
    public const int ProcessedTargets = 54;
    public const int ReadyToCollectTargets = 55;
    public const int TargetsBuffer = 56;
    public const int TargetsLimit = 57;

    public const int TotalComponents = 58;

    public static readonly string[] componentNames = {
        "AddedView",
        "Dead",
        "Destructed",
        "Owner",
        "Processed",
        "Radius",
        "SelfDestructTimer",
        "View",
        "ViewPath",
        "ViewPrefab",
        "ViewReference",
        "Active",
        "CharacterController",
        "Damage",
        "EntityLink",
        "Id",
        "Rigidbody",
        "SpriteRenderer",
        "Transform",
        "WorldPosition",
        "WorldRotation",
        "Camera",
        "CameraHolder",
        "Model",
        "Player",
        "AttackPoint",
        "Shoot",
        "CurrentHealth",
        "DamageEffect",
        "Effect",
        "EffectValue",
        "MaxHealth",
        "ProducerId",
        "PushEffect",
        "TargetId",
        "BaseStats",
        "StatChange",
        "StatModifiers",
        "Direction",
        "MoveByPhysic",
        "MovementAvailable",
        "MoveSmooth",
        "Moving",
        "RotationAlignedAlongDirection",
        "Speed",
        "Teleport",
        "TurnedAlongDirection",
        "EffectSetups",
        "Projectile",
        "SimpleBulletProjectile",
        "CollectTargetsContinuously",
        "CollectTargetsInterval",
        "CollectTargetsTimer",
        "LayerMask",
        "ProcessedTargets",
        "ReadyToCollectTargets",
        "TargetsBuffer",
        "TargetsLimit"
    };

    public static readonly System.Type[] componentTypes = {
        typeof(_Scripts.Common.AddedView),
        typeof(_Scripts.Common.Dead),
        typeof(_Scripts.Common.Destructed),
        typeof(_Scripts.Common.Owner),
        typeof(_Scripts.Common.Processed),
        typeof(_Scripts.Common.Radius),
        typeof(_Scripts.Common.SelfDestructTimer),
        typeof(_Scripts.Common.View),
        typeof(_Scripts.Common.ViewPath),
        typeof(_Scripts.Common.ViewPrefab),
        typeof(_Scripts.Common.ViewReference),
        typeof(_Scripts.Gameplay.Common.CommonComponents.Active),
        typeof(_Scripts.Gameplay.Common.CommonComponents.CharacterControllerComponent),
        typeof(_Scripts.Gameplay.Common.CommonComponents.Damage),
        typeof(_Scripts.Gameplay.Common.CommonComponents.EntityLink),
        typeof(_Scripts.Gameplay.Common.CommonComponents.Id),
        typeof(_Scripts.Gameplay.Common.CommonComponents.RigidbodyComponent),
        typeof(_Scripts.Gameplay.Common.CommonComponents.SpriteRendererComponent),
        typeof(_Scripts.Gameplay.Common.CommonComponents.TransformComponent),
        typeof(_Scripts.Gameplay.Common.CommonComponents.WorldPosition),
        typeof(_Scripts.Gameplay.Common.CommonComponents.WorldRotation),
        typeof(_Scripts.Gameplay.Features.Camera.CameraComponents.CameraComponent),
        typeof(_Scripts.Gameplay.Features.Camera.CameraComponents.CameraHolder),
        typeof(_Scripts.Gameplay.Features.Player.Model),
        typeof(_Scripts.Gameplay.Features.Player.Player),
        typeof(_Scripts.Gameplay.Features.SimpleShootSystem.ShootComponents.AttackPoint),
        typeof(_Scripts.Gameplay.Features.SimpleShootSystem.ShootComponents.Shoot),
        typeof(Gameplay.Features.Effects.CurrentHealth),
        typeof(Gameplay.Features.Effects.DamageEffect),
        typeof(Gameplay.Features.Effects.Effect),
        typeof(Gameplay.Features.Effects.EffectValue),
        typeof(Gameplay.Features.Effects.MaxHealth),
        typeof(Gameplay.Features.Effects.ProducerId),
        typeof(Gameplay.Features.Effects.PushEffect),
        typeof(Gameplay.Features.Effects.TargetId),
        typeof(Gameplay.Features.EntitiesStats.BaseStats),
        typeof(Gameplay.Features.EntitiesStats.StatChange),
        typeof(Gameplay.Features.EntitiesStats.StatModifiers),
        typeof(Gameplay.Features.Movement.Direction),
        typeof(Gameplay.Features.Movement.MoveByPhysic),
        typeof(Gameplay.Features.Movement.MovementAvailable),
        typeof(Gameplay.Features.Movement.MoveSmooth),
        typeof(Gameplay.Features.Movement.Moving),
        typeof(Gameplay.Features.Movement.RotationAlignedAlongDirection),
        typeof(Gameplay.Features.Movement.Speed),
        typeof(Gameplay.Features.Movement.Teleport),
        typeof(Gameplay.Features.Movement.TurnedAlongDirection),
        typeof(Gameplay.Features.Projectiles.EffectSetupsComponent),
        typeof(Gameplay.Features.Projectiles.Projectile),
        typeof(Gameplay.Features.Projectiles.SimpleBulletProjectile),
        typeof(Gameplay.Features.TargetsCollector.CollectTargetsContinuously),
        typeof(Gameplay.Features.TargetsCollector.CollectTargetsInterval),
        typeof(Gameplay.Features.TargetsCollector.CollectTargetsTimer),
        typeof(Gameplay.Features.TargetsCollector.LayerMask),
        typeof(Gameplay.Features.TargetsCollector.ProcessedTargets),
        typeof(Gameplay.Features.TargetsCollector.ReadyToCollectTargets),
        typeof(Gameplay.Features.TargetsCollector.TargetsBuffer),
        typeof(Gameplay.Features.TargetsCollector.TargetsLimit)
    };
}
