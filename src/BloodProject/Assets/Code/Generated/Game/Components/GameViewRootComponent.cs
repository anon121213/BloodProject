//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherViewRoot;

    public static Entitas.IMatcher<GameEntity> ViewRoot {
        get {
            if (_matcherViewRoot == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ViewRoot);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherViewRoot = matcher;
            }

            return _matcherViewRoot;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public _Scripts.Common.ViewRootComponent viewRoot { get { return (_Scripts.Common.ViewRootComponent)GetComponent(GameComponentsLookup.ViewRoot); } }
    public UnityEngine.Transform ViewRoot { get { return viewRoot.Value; } }
    public bool hasViewRoot { get { return HasComponent(GameComponentsLookup.ViewRoot); } }

    public GameEntity AddViewRoot(UnityEngine.Transform newValue) {
        var index = GameComponentsLookup.ViewRoot;
        var component = (_Scripts.Common.ViewRootComponent)CreateComponent(index, typeof(_Scripts.Common.ViewRootComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceViewRoot(UnityEngine.Transform newValue) {
        var index = GameComponentsLookup.ViewRoot;
        var component = (_Scripts.Common.ViewRootComponent)CreateComponent(index, typeof(_Scripts.Common.ViewRootComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveViewRoot() {
        RemoveComponent(GameComponentsLookup.ViewRoot);
        return this;
    }
}
