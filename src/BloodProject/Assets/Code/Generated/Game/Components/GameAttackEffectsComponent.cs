//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAttackEffects;

    public static Entitas.IMatcher<GameEntity> AttackEffects {
        get {
            if (_matcherAttackEffects == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AttackEffects);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAttackEffects = matcher;
            }

            return _matcherAttackEffects;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public _Scripts.Gameplay.Features.Enemies.AttackEffects attackEffects { get { return (_Scripts.Gameplay.Features.Enemies.AttackEffects)GetComponent(GameComponentsLookup.AttackEffects); } }
    public System.Collections.Generic.List<Gameplay.Features.Effects.Data.EffectSetup> AttackEffects { get { return attackEffects.Value; } }
    public bool hasAttackEffects { get { return HasComponent(GameComponentsLookup.AttackEffects); } }

    public GameEntity AddAttackEffects(System.Collections.Generic.List<Gameplay.Features.Effects.Data.EffectSetup> newValue) {
        var index = GameComponentsLookup.AttackEffects;
        var component = (_Scripts.Gameplay.Features.Enemies.AttackEffects)CreateComponent(index, typeof(_Scripts.Gameplay.Features.Enemies.AttackEffects));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAttackEffects(System.Collections.Generic.List<Gameplay.Features.Effects.Data.EffectSetup> newValue) {
        var index = GameComponentsLookup.AttackEffects;
        var component = (_Scripts.Gameplay.Features.Enemies.AttackEffects)CreateComponent(index, typeof(_Scripts.Gameplay.Features.Enemies.AttackEffects));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAttackEffects() {
        RemoveComponent(GameComponentsLookup.AttackEffects);
        return this;
    }
}
