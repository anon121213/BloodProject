//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDistanceToAttackPlayer;

    public static Entitas.IMatcher<GameEntity> DistanceToAttackPlayer {
        get {
            if (_matcherDistanceToAttackPlayer == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.DistanceToAttackPlayer);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDistanceToAttackPlayer = matcher;
            }

            return _matcherDistanceToAttackPlayer;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public _Scripts.Gameplay.Features.Enemies.DistanceToAttackPlayer distanceToAttackPlayer { get { return (_Scripts.Gameplay.Features.Enemies.DistanceToAttackPlayer)GetComponent(GameComponentsLookup.DistanceToAttackPlayer); } }
    public float DistanceToAttackPlayer { get { return distanceToAttackPlayer.Value; } }
    public bool hasDistanceToAttackPlayer { get { return HasComponent(GameComponentsLookup.DistanceToAttackPlayer); } }

    public GameEntity AddDistanceToAttackPlayer(float newValue) {
        var index = GameComponentsLookup.DistanceToAttackPlayer;
        var component = (_Scripts.Gameplay.Features.Enemies.DistanceToAttackPlayer)CreateComponent(index, typeof(_Scripts.Gameplay.Features.Enemies.DistanceToAttackPlayer));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceDistanceToAttackPlayer(float newValue) {
        var index = GameComponentsLookup.DistanceToAttackPlayer;
        var component = (_Scripts.Gameplay.Features.Enemies.DistanceToAttackPlayer)CreateComponent(index, typeof(_Scripts.Gameplay.Features.Enemies.DistanceToAttackPlayer));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveDistanceToAttackPlayer() {
        RemoveComponent(GameComponentsLookup.DistanceToAttackPlayer);
        return this;
    }
}
