//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRotateToPlayerSpeed;

    public static Entitas.IMatcher<GameEntity> RotateToPlayerSpeed {
        get {
            if (_matcherRotateToPlayerSpeed == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RotateToPlayerSpeed);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRotateToPlayerSpeed = matcher;
            }

            return _matcherRotateToPlayerSpeed;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public _Scripts.Gameplay.Features.Enemies.RotateToPlayerSpeed rotateToPlayerSpeed { get { return (_Scripts.Gameplay.Features.Enemies.RotateToPlayerSpeed)GetComponent(GameComponentsLookup.RotateToPlayerSpeed); } }
    public float RotateToPlayerSpeed { get { return rotateToPlayerSpeed.Value; } }
    public bool hasRotateToPlayerSpeed { get { return HasComponent(GameComponentsLookup.RotateToPlayerSpeed); } }

    public GameEntity AddRotateToPlayerSpeed(float newValue) {
        var index = GameComponentsLookup.RotateToPlayerSpeed;
        var component = (_Scripts.Gameplay.Features.Enemies.RotateToPlayerSpeed)CreateComponent(index, typeof(_Scripts.Gameplay.Features.Enemies.RotateToPlayerSpeed));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceRotateToPlayerSpeed(float newValue) {
        var index = GameComponentsLookup.RotateToPlayerSpeed;
        var component = (_Scripts.Gameplay.Features.Enemies.RotateToPlayerSpeed)CreateComponent(index, typeof(_Scripts.Gameplay.Features.Enemies.RotateToPlayerSpeed));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveRotateToPlayerSpeed() {
        RemoveComponent(GameComponentsLookup.RotateToPlayerSpeed);
        return this;
    }
}
