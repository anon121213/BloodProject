//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using _Scripts.Gameplay.Features.ProjectilesCollides;

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherIgnoreLayers;

    public static Entitas.IMatcher<GameEntity> IgnoreLayers {
        get {
            if (_matcherIgnoreLayers == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.IgnoreLayers);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherIgnoreLayers = matcher;
            }

            return _matcherIgnoreLayers;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public IgnoreLayers ignoreLayers { get { return (IgnoreLayers)GetComponent(GameComponentsLookup.IgnoreLayers); } }
    public UnityEngine.LayerMask IgnoreLayers { get { return ignoreLayers.Value; } }
    public bool hasIgnoreLayers { get { return HasComponent(GameComponentsLookup.IgnoreLayers); } }

    public GameEntity AddIgnoreLayers(UnityEngine.LayerMask newValue) {
        var index = GameComponentsLookup.IgnoreLayers;
        var component = (IgnoreLayers)CreateComponent(index, typeof(IgnoreLayers));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceIgnoreLayers(UnityEngine.LayerMask newValue) {
        var index = GameComponentsLookup.IgnoreLayers;
        var component = (IgnoreLayers)CreateComponent(index, typeof(IgnoreLayers));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveIgnoreLayers() {
        RemoveComponent(GameComponentsLookup.IgnoreLayers);
        return this;
    }
}
