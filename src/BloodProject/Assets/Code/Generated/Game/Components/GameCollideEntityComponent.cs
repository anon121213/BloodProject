//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCollideEntity;

    public static Entitas.IMatcher<GameEntity> CollideEntity {
        get {
            if (_matcherCollideEntity == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CollideEntity);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCollideEntity = matcher;
            }

            return _matcherCollideEntity;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public _Scripts.Gameplay.Features.ProjectilesCollides.CollideEntity collideEntity { get { return (_Scripts.Gameplay.Features.ProjectilesCollides.CollideEntity)GetComponent(GameComponentsLookup.CollideEntity); } }
    public GameEntity CollideEntity { get { return collideEntity.Value; } }
    public bool hasCollideEntity { get { return HasComponent(GameComponentsLookup.CollideEntity); } }

    public GameEntity AddCollideEntity(GameEntity newValue) {
        var index = GameComponentsLookup.CollideEntity;
        var component = (_Scripts.Gameplay.Features.ProjectilesCollides.CollideEntity)CreateComponent(index, typeof(_Scripts.Gameplay.Features.ProjectilesCollides.CollideEntity));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCollideEntity(GameEntity newValue) {
        var index = GameComponentsLookup.CollideEntity;
        var component = (_Scripts.Gameplay.Features.ProjectilesCollides.CollideEntity)CreateComponent(index, typeof(_Scripts.Gameplay.Features.ProjectilesCollides.CollideEntity));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCollideEntity() {
        RemoveComponent(GameComponentsLookup.CollideEntity);
        return this;
    }
}
