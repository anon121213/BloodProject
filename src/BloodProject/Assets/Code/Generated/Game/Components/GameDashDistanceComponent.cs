//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDashDistance;

    public static Entitas.IMatcher<GameEntity> DashDistance {
        get {
            if (_matcherDashDistance == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.DashDistance);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDashDistance = matcher;
            }

            return _matcherDashDistance;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public _Scripts.Gameplay.Features.Dash.DashDistance dashDistance { get { return (_Scripts.Gameplay.Features.Dash.DashDistance)GetComponent(GameComponentsLookup.DashDistance); } }
    public float DashDistance { get { return dashDistance.Value; } }
    public bool hasDashDistance { get { return HasComponent(GameComponentsLookup.DashDistance); } }

    public GameEntity AddDashDistance(float newValue) {
        var index = GameComponentsLookup.DashDistance;
        var component = (_Scripts.Gameplay.Features.Dash.DashDistance)CreateComponent(index, typeof(_Scripts.Gameplay.Features.Dash.DashDistance));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceDashDistance(float newValue) {
        var index = GameComponentsLookup.DashDistance;
        var component = (_Scripts.Gameplay.Features.Dash.DashDistance)CreateComponent(index, typeof(_Scripts.Gameplay.Features.Dash.DashDistance));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveDashDistance() {
        RemoveComponent(GameComponentsLookup.DashDistance);
        return this;
    }
}
