//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using _Scripts.Gameplay.Features.ProjectilesCollides;

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCollideEntityCollider;

    public static Entitas.IMatcher<GameEntity> CollideEntityCollider {
        get {
            if (_matcherCollideEntityCollider == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CollideEntityCollider);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCollideEntityCollider = matcher;
            }

            return _matcherCollideEntityCollider;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public CollideEntityCollider collideEntityCollider { get { return (CollideEntityCollider)GetComponent(GameComponentsLookup.CollideEntityCollider); } }
    public UnityEngine.Collider CollideEntityCollider { get { return collideEntityCollider.Value; } }
    public bool hasCollideEntityCollider { get { return HasComponent(GameComponentsLookup.CollideEntityCollider); } }

    public GameEntity AddCollideEntityCollider(UnityEngine.Collider newValue) {
        var index = GameComponentsLookup.CollideEntityCollider;
        var component = (CollideEntityCollider)CreateComponent(index, typeof(CollideEntityCollider));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCollideEntityCollider(UnityEngine.Collider newValue) {
        var index = GameComponentsLookup.CollideEntityCollider;
        var component = (CollideEntityCollider)CreateComponent(index, typeof(CollideEntityCollider));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCollideEntityCollider() {
        RemoveComponent(GameComponentsLookup.CollideEntityCollider);
        return this;
    }
}
