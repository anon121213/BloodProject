//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAttackPoint;

    public static Entitas.IMatcher<GameEntity> AttackPoint {
        get {
            if (_matcherAttackPoint == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AttackPoint);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAttackPoint = matcher;
            }

            return _matcherAttackPoint;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public _Scripts.Gameplay.Features.SimpleShootSystem.ShootComponents.AttackPoint attackPoint { get { return (_Scripts.Gameplay.Features.SimpleShootSystem.ShootComponents.AttackPoint)GetComponent(GameComponentsLookup.AttackPoint); } }
    public UnityEngine.Transform AttackPoint { get { return attackPoint.Value; } }
    public bool hasAttackPoint { get { return HasComponent(GameComponentsLookup.AttackPoint); } }

    public GameEntity AddAttackPoint(UnityEngine.Transform newValue) {
        var index = GameComponentsLookup.AttackPoint;
        var component = (_Scripts.Gameplay.Features.SimpleShootSystem.ShootComponents.AttackPoint)CreateComponent(index, typeof(_Scripts.Gameplay.Features.SimpleShootSystem.ShootComponents.AttackPoint));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAttackPoint(UnityEngine.Transform newValue) {
        var index = GameComponentsLookup.AttackPoint;
        var component = (_Scripts.Gameplay.Features.SimpleShootSystem.ShootComponents.AttackPoint)CreateComponent(index, typeof(_Scripts.Gameplay.Features.SimpleShootSystem.ShootComponents.AttackPoint));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAttackPoint() {
        RemoveComponent(GameComponentsLookup.AttackPoint);
        return this;
    }
}
